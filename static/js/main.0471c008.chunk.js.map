{"version":3,"sources":["components/NotFound.tsx","clients/MarkdownClient.ts","hooks/useMarkdown.ts","components/MarkdownRendrer.tsx","containers/MarkdownViewer.tsx","index.tsx"],"names":["NotFound","location","useLocation","pathname","MarkdownClient","path","axios","get","res","content","data","error","console","log","message","code","getMarkdownName","endsWith","MarkdownRendrer","html","marked","dangerouslySetInnerHTML","__html","MarkdownViewer","markdown","useState","setData","useEffect","a","client","fetchDocument","success","undefined","useMarkdown","ReactDOM","render","StrictMode","exact","component","document","getElementById"],"mappings":"wNAGaA,EAAe,WAC1B,IAAIC,EAAWC,cAEf,OACE,8BACE,+CACe,+BAAOD,EAASE,iB,iECCxBC,EAAb,oIACE,WAA2BC,GAA3B,kGAEsBC,IAAMC,IAAN,eAA0BF,IAFhD,cAEUG,EAFV,yBAGW,CACLC,QAASD,EAAIE,OAJnB,uCAOUC,EAPV,KAQIC,QAAQC,IAAIF,EAAMG,SARtB,kBASW,CACLH,MAAO,CACLG,QAASH,EAAMG,QACfC,KAAMJ,EAAMI,QAZpB,yDADF,8DCoBA,SAASC,EAAgBX,GACvB,OAAIA,EAAKY,SAAS,KACV,GAAN,OAAUZ,EAAV,YAEM,GAAN,OAAUA,EAAV,O,qBC3BSa,EAA6B,SAAC,GAAiB,IAAfT,EAAc,EAAdA,QAC3C,IAAKA,EACH,OAAO,KAGT,IAAMU,EAAOC,IAAOX,GAEpB,OAAO,qBAAKY,wBAAyB,CAAEC,OAAQH,MCNpCI,EAAqB,WAAO,IAAD,IAChCC,EFAD,WACL,MAAwBC,qBAAxB,mBAAOf,EAAP,KAAagB,EAAb,KACMzB,EAAWC,cAYjB,OAVAyB,qBAAU,WACR,sBAAC,8BAAAC,EAAA,6DACOC,EAAS,IAAIzB,EADpB,SAEoByB,EAAOC,cACxBd,EAAgBf,EAASE,WAH5B,OAEOO,EAFP,OAKCgB,EAAQhB,GALT,0CAAD,KAOC,CAACT,EAASE,WAEN,CACL4B,aAAyBC,KAAZ,OAAJtB,QAAI,IAAJA,OAAA,EAAAA,EAAMC,OACfF,QAAO,OAAEC,QAAF,IAAEA,OAAF,EAAEA,EAAMD,QACfE,MAAK,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAMC,OEjBEsB,GAEjB,OAAIT,EAASO,QACJ,cAAC,EAAD,CAAiBtB,QAASe,EAASf,UANvB,SASjB,UAAAe,EAASb,aAAT,eAAgBI,MACX,cAAC,EAAD,IAGF,uCAAKS,EAASb,aAAd,QAAuB,0B,YCXhCuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAO,EAAMhC,KAAK,IAAIiC,UAAWf,IACxC,cAAC,IAAD,CAAOlB,KAAK,SAASiC,UAAWf,IAChC,cAAC,IAAD,CAAOlB,KAAK,IAAZ,SACE,cAAC,EAAD,aAKRkC,SAASC,eAAe,W","file":"static/js/main.0471c008.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const NotFound: FC = () => {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n};\n","import axios, { AxiosError } from 'axios';\n\nexport interface MarkdownResponse {\n  content?: string;\n  error?: {\n    message: string;\n    code?: string;\n  };\n}\n\nexport class MarkdownClient {\n  public async fetchDocument(path: string): Promise<MarkdownResponse> {\n    try {\n      const res = await axios.get<string>(`/docs${path}`);\n      return {\n        content: res.data,\n      };\n    } catch (e) {\n      const error = e as AxiosError;\n      console.log(error.message);\n      return {\n        error: {\n          message: error.message,\n          code: error.code,\n        },\n      };\n    }\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { MarkdownClient, MarkdownResponse } from '../clients/MarkdownClient';\n\ntype MarkdownState = MarkdownResponse & {\n  success: boolean;\n};\n\nexport function useMarkdown(): MarkdownState {\n  const [data, setData] = useState<MarkdownResponse>();\n  const location = useLocation();\n\n  useEffect(() => {\n    (async () => {\n      const client = new MarkdownClient();\n      const data = await client.fetchDocument(\n        getMarkdownName(location.pathname)\n      );\n      setData(data);\n    })();\n  }, [location.pathname]);\n\n  return {\n    success: data?.error === undefined,\n    content: data?.content,\n    error: data?.error,\n  };\n}\n\nfunction getMarkdownName(path: string): string {\n  if (path.endsWith('/')) {\n    return `${path}index.md`;\n  } else {\n    return `${path}.md`;\n  }\n}\n","import { FC } from 'react';\nimport marked from 'marked';\n\ntype Props = {\n  content?: string;\n};\n\nexport const MarkdownRendrer: FC<Props> = ({ content }) => {\n  if (!content) {\n    return null;\n  }\n\n  const html = marked(content);\n\n  return <div dangerouslySetInnerHTML={{ __html: html }} />;\n};\n","import { FC } from 'react';\n\nimport { useMarkdown } from '../hooks/useMarkdown';\nimport { MarkdownRendrer } from '../components/MarkdownRendrer';\nimport { NotFound } from '../components/NotFound';\n\nconst HTTP_NOT_FOUND = '404';\n\nexport const MarkdownViewer: FC = () => {\n  const markdown = useMarkdown();\n\n  if (markdown.success) {\n    return <MarkdownRendrer content={markdown.content} />;\n  }\n\n  if (markdown.error?.code === HTTP_NOT_FOUND) {\n    return <NotFound />;\n  }\n\n  return <h1>{markdown.error ?? 'Something went wrong'}</h1>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { NotFound } from './components/NotFound';\nimport { MarkdownViewer } from './containers/MarkdownViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact={true} path=\"/\" component={MarkdownViewer} />\n        <Route path=\"/about\" component={MarkdownViewer} />\n        <Route path=\"*\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}